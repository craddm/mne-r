% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mne.r
\name{get_data_frame}
\alias{get_data_frame}
\title{Get data from MNE into R data.frame}
\usage{
get_data_frame(inst, picks = NULL, index = NULL, scaling_time = 1000,
  scalings = NULL, copy = TRUE, start = NULL, stop = NULL,
  long_format = TRUE)
}
\arguments{
\item{inst}{An instance of MNE data containers, e.g,
\code{mne$Epochs}, \code{mne$io$Raw}, \code{mne$Evoked}.}

\item{picks}{A zero-indexed integer array, a string, list, slice or
None.}

\item{index}{The columns to be uesed as pandas index. tuple of str
or None.}

\item{scaling_time}{Scaling to be applied to time units. Float.}

\item{scalings}{Scaling to be applied to the channels picked.}

\item{copy}{Whether to make a copy of the data.}

\item{start}{If it is a Raw object, this defines a starting index
for creating the dataframe from a slice. The times will be
interpolated from the index and the sampling rate of the
signal. Int or None.}

\item{stop}{If it is a Raw object, this defines a stop index for
creating the dataframe from a slice. The times will be
interpolated from the index and the sampling rate of the
signal. Int or None.}

\item{long_format}{If True, the dataframe is returned in long
format where each row is one observation of the signal at a
unique coordinate of channels, time points, epochs and
conditions. The number of factors depends on the data
container. For convenience, a ch_type column is added when
using this option that will facilitate subsetting the
resulting dataframe.
If False, mne-r is making sure that the channel names
are cleaned from white spaces to esnure that the R-formulas
will work. In the case that epochs are passed, the pandas
muliti-index is unpacked and the columns "condition",
"epochs", and "time" are prepended. Unliker the
MNE-Python function, the default is TRUE.}
}
\value{
Returns a data.frame. The layout depends on the options
(e.g. \code{long_format}) and the type of instance
(e.g. Epochs vs Raw).
}
\description{
\code{get_data_frame} helps importing MNE data structures
}
\details{
The code will call the \code{.to_data_frame} method of the MNE
data container and returns a dataframe readily usable in R. Note
that the type definitions below refer to Python types. Please see
the reticulate documentation to learn about R-to-Python
\href{https://rstudio.github.io/reticulate/articles/calling_python.
html}{conversion rules}. Note that this function requires, next to
MNE, a working \href{https://pandas.pydata.org}{Pandas} installation.
For background information on exporting MNE objects
to dataframes, consider the designated \href{https://martinos.org/
mne/dev/auto_tutorials/plot_epochs_to_data_frame.html}{MNE
tutorial}.
}
\examples{
have_mne <- reticulate::py_module_available("mne")

if (have_mne) {
  library("mne")
  fname <- paste(mne$datasets$testing$data_path(),
               "MEG", "sample", "sample_audvis_trunc_raw.fif",
               sep = "/")
  raw <- mne$io$read_raw_fif(fname, preload = TRUE)
  raw_df <- get_data_frame(raw)
  print(head(raw_df))
}
}
